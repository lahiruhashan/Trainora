////  SettingsView.swift//  Trainora////  Created by user266021 on 5/4/25.//import SwiftUIstruct SettingsView: View {    @EnvironmentObject var colorSchemeManager: ColorSchemeManager    @EnvironmentObject var localizationManager: LocalizationManager    @State private var preferences: UserPreferencesProtocol = UserPreferences()    @State private var showChangePassword = false    @EnvironmentObject var userSession: UserSession    @EnvironmentObject var notifVM: NotificationViewModel    let availableLanguages = ["en": "English", "si": "සිංහල", "ta": "தமிழ்"]    var body: some View {        NavigationStack {            Form {                Section(                    header: Text(                        "Appearance".localized(using: localizationManager)                    )                ) {                    Picker(                        "Theme".localized(using: localizationManager),                        selection: Binding(                            get: { colorSchemeManager.selectedTheme },                            set: {                                colorSchemeManager.selectedTheme = $0                                preferences.selectedTheme = $0                            }                        )                    ) {                        ForEach(AppTheme.allCases, id: \.self) { theme in                            Text(theme.rawValue.capitalized)                        }                    }                    .pickerStyle(SegmentedPickerStyle())                }                Section(                    header: Text(                        "Account".localized(using: localizationManager)                    )                ) {                    NavigationLink(destination: ChangePasswordView()) {                        Text(                            "Change Password".localized(                                using: localizationManager                            )                        )                    }                    Picker(                        "Language".localized(using: localizationManager),                        selection: Binding(                            get: { localizationManager.selectedLanguage },                            set: {                                localizationManager.selectedLanguage = $0                                preferences.selectedLanguage = $0                            }                        )                    ) {                        ForEach(availableLanguages.keys.sorted(), id: \.self) {                            code in                            Text(availableLanguages[code]!).tag(code)                        }                    }                }                Section(header: Text("Notifications")) {                    Toggle(                        "Enable Notifications",                        isOn: Binding(                            get: { preferences.notificationsEnabled },                            set: { v in                                preferences.notificationsEnabled = v                                if v {                                    NotificationManager.shared                                        .scheduleExerciseReminder(                                            at: preferences.reminderTime                                        )                                    NotificationManager.shared                                        .scheduleDietReminders()                                } else {                                    NotificationManager.shared                                        .cancelExerciseReminder()                                    NotificationManager.shared                                        .cancelDietReminders()                                }                            }                        )                    )                    DatePicker(                        "Exercise Time",                        selection: Binding(                            get: { preferences.reminderTime },                            set: { t in                                preferences.reminderTime = t                                if preferences.notificationsEnabled {                                    NotificationManager.shared                                        .scheduleExerciseReminder(at: t)                                }                            }                        ),                        displayedComponents: .hourAndMinute                    )                }                Section {                    Button(action: {                        // Clear user session                        userSession.currentUser = nil                    }) {                        Text("Sign Out".localized(using: localizationManager))                            .foregroundColor(.red)                            .frame(maxWidth: .infinity, alignment: .center)                    }                }            }            .navigationTitle("Settings".localized(using: localizationManager))        }    }}