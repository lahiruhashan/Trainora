////  ExerciseLibraryServiceProtocol.swift//  Trainora////  Created by user266021 on 5/1/25.//import Foundationimport Combineprotocol ExerciseLibraryServiceProtocol {    var currentLevel: ExperienceLevel { get set }    func fetchCategoryDTOs() -> AnyPublisher<[ExerciseCategory], Never>    func fetchExerciseDTOs(for categoryId: UUID) -> AnyPublisher<[Exercise], Never>    func toggleFavoriteCategory(id: UUID)    func toggleFavoriteExercise(id: UUID)}final class ExerciseLibraryService: ExerciseLibraryServiceProtocol {    private let repository: ExerciseRepositoryProtocol    private var preferences: UserPreferencesProtocol    init(repository: ExerciseRepositoryProtocol, preferences: UserPreferencesProtocol) {        self.repository = repository        self.preferences = preferences    }    var currentLevel: ExperienceLevel {        get { preferences.lastSelectedLevel }        set { preferences.lastSelectedLevel = newValue }    }    func fetchCategoryDTOs() -> AnyPublisher<[ExerciseCategory], Never> {        Publishers.Zip(            repository.fetchCategories(for: currentLevel).replaceError(with: []),            repository.fetchAllExercises().replaceError(with: [])        )        .map { categories, exercises in            categories.map { category in                let related = exercises.filter { $0.categoryId == category.id }                let domain = category.toDomain()                return ExerciseCategory(                    id: domain.id,                    title: domain.title,                    imageName: domain.imageName,                    level: domain.level,                    totalExercises: related.count,                    totalCalories: related.reduce(0) { $0 + $1.calories },                    totalDuration: related.reduce(0) { $0 + $1.duration },                    isFavorite: domain.isFavorite                )            }            .sorted(by: { $0.isFavorite && !$1.isFavorite || $0.title < $1.title })        }        .eraseToAnyPublisher()    }    func fetchExerciseDTOs(for categoryId: UUID) -> AnyPublisher<[Exercise], Never> {        repository.fetchExercises(for: categoryId)            .replaceError(with: [])            .map { $0.map { $0.toDomain() } }            .eraseToAnyPublisher()    }    func toggleFavoriteCategory(id: UUID) {        repository.toggleFavoriteCategory(id: id)    }    func toggleFavoriteExercise(id: UUID) {        repository.toggleFavoriteExercise(id: id)    }}