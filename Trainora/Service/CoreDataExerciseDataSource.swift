////  CoreDataExerciseDataSource.swift//  Trainora////  Created by user266021 on 5/1/25.//import Foundationimport CoreDataimport Combinefinal class CoreDataExerciseDataSource: ExerciseDataSourceProtocol {    private let context: NSManagedObjectContext    init(context: NSManagedObjectContext = PersistenceController.shared.container.viewContext) {        self.context = context    }    func getCategories(for level: ExperienceLevel) -> AnyPublisher<[ExerciseCategoryEntity], Error> {        let request: NSFetchRequest<ExerciseCategoryEntity> = ExerciseCategoryEntity.fetchRequest()        request.predicate = NSPredicate(format: "level == %@", level.rawValue)        return Future { promise in            do {                let entities = try self.context.fetch(request)                promise(.success(entities))            } catch {                promise(.failure(error))            }        }.eraseToAnyPublisher()    }    func getExercises(for categoryId: UUID) -> AnyPublisher<[ExerciseEntity], Error> {        let request: NSFetchRequest<ExerciseEntity> = ExerciseEntity.fetchRequest()        request.predicate = NSPredicate(format: "categoryId == %@", categoryId as CVarArg)        return Future { promise in            do {                let entities = try self.context.fetch(request)                promise(.success(entities))            } catch {                promise(.failure(error))            }        }.eraseToAnyPublisher()    }    func getAllExercises() -> AnyPublisher<[ExerciseEntity], Error> {        let request: NSFetchRequest<ExerciseEntity> = ExerciseEntity.fetchRequest()        return Future { promise in            do {                let entities = try self.context.fetch(request)                promise(.success(entities))            } catch {                promise(.failure(error))            }        }.eraseToAnyPublisher()    }    func updateFavoriteCategory(id: UUID) {        let request: NSFetchRequest<ExerciseCategoryEntity> = ExerciseCategoryEntity.fetchRequest()        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)        if let entity = try? context.fetch(request).first {            entity.isFavorite.toggle()            try? context.save()        }    }    func updateFavoriteExercise(id: UUID) {        let request: NSFetchRequest<ExerciseEntity> = ExerciseEntity.fetchRequest()        request.predicate = NSPredicate(format: "id == %@", id as CVarArg)        if let entity = try? context.fetch(request).first {            entity.isFavorite.toggle()            try? context.save()        }    }}