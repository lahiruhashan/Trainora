////  ExerciseRepositoryProtocol.swift//  Trainora////  Created by user266021 on 5/1/25.//import Foundationimport Combineprotocol ExerciseRepositoryProtocol {    func fetchCategories(for level: ExperienceLevel) -> AnyPublisher<[ExerciseCategoryEntity], Error>    func fetchAllExercises() -> AnyPublisher<[ExerciseEntity], Error>    func fetchExercises(for categoryId: UUID) -> AnyPublisher<[ExerciseEntity], Error>    func toggleFavoriteCategory(id: UUID)    func toggleFavoriteExercise(id: UUID)}final class ExerciseRepository: ExerciseRepositoryProtocol {    private let dataSource: ExerciseDataSourceProtocol    init(dataSource: ExerciseDataSourceProtocol) {        self.dataSource = dataSource    }    func fetchCategories(for level: ExperienceLevel) -> AnyPublisher<[ExerciseCategoryEntity], Error> {        dataSource.getCategories(for: level)    }    func fetchAllExercises() -> AnyPublisher<[ExerciseEntity], Error> {        dataSource.getAllExercises()    }    func fetchExercises(for categoryId: UUID) -> AnyPublisher<[ExerciseEntity], Error> {        dataSource.getExercises(for: categoryId)    }    func toggleFavoriteCategory(id: UUID) {        dataSource.updateFavoriteCategory(id: id)    }    func toggleFavoriteExercise(id: UUID) {        dataSource.updateFavoriteExercise(id: id)    }}