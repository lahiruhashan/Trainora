////  NotificationRepository.swift//  Trainora////  Created by user266021 on 5/7/25.//import Foundationimport Combinefinal class NotificationRepository {    static let shared = NotificationRepository()    private let fileURL: URL    private(set) var notifications: [NotificationModel] = []    let publisher = CurrentValueSubject<[NotificationModel], Never>([])    private init() {        let fm = FileManager.default        let docs = fm.urls(for: .documentDirectory, in: .userDomainMask).first!        fileURL = docs.appendingPathComponent("notifications.json")        load()    }    private func load() {        do {            let data = try Data(contentsOf: fileURL)            notifications = try JSONDecoder().decode(                [NotificationModel].self,                from: data            )            notifications.sort { $0.date > $1.date }        } catch {            notifications = []        }        publisher.send(notifications)    }    private func save() {        do {            let data = try JSONEncoder().encode(notifications)            try data.write(to: fileURL, options: .atomic)        } catch {            print("Failed to write notifications:", error)        }    }    func append(_ n: NotificationModel) {        guard !notifications.contains(where: { $0.id == n.id }) else { return }        notifications.insert(n, at: 0)        notifications.sort { $0.date > $1.date }        save()        publisher.send(notifications)    }   }