////  ExerciseListViewModel.swift//  Trainora////  Created by user266021 on 5/1/25.//import Foundationimport Combinefinal class ExerciseListViewModel: ObservableObject {    @Published var exercises: [Exercise] = []    private var service: ExerciseLibraryServiceProtocol    private let categoryId: UUID    private var cancellables = Set<AnyCancellable>()    init(service: ExerciseLibraryServiceProtocol, categoryId: UUID) {        self.service = service        self.categoryId = categoryId        loadExercises()    }    func loadExercises() {        service.fetchExerciseDTOs(for: categoryId)            .receive(on: DispatchQueue.main)            .map { list in                list.sorted {                    if $0.isFavorite != $1.isFavorite {                        return $0.isFavorite                    } else {                        return $0.title < $1.title                    }                }            }            .assign(to: &$exercises)    }    func toggleFavoriteExercise(id: UUID) {        service.toggleFavoriteExercise(id: id)        loadExercises()    }}