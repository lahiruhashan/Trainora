////  UserProfileViewModel.swift//  Trainora////  Created by user266021 on 5/3/25.//import Foundationimport Combineimport UIKitfinal class UserProfileViewModel: ObservableObject {    @Published var profile: UserProfile = UserProfile(        id: UUID(),        firstName: "",        lastName: "",        email: "",        mobileNumber: "",        password: "",        dateOfBirth: Date(),        weight: 0,        height: 0,        profileImageName: "",        experience: .beginner,        gender: .male,        age: 0    )    @Published var loaded = false    var age: Int {        Calendar.current.dateComponents([.year], from: profile.dateOfBirth, to: Date()).year ?? 0    }    private let service: UserProfileServiceProtocol    private var cancellables = Set<AnyCancellable>()    private var originalProfile: UserProfile? = nil    init(service: UserProfileServiceProtocol, userProfile: UserProfile) {        self.service = service        loadProfile(email: userProfile.email)    }    func loadProfile(email: String) {        service.getUserProfileByEmail(email: email)            .receive(on: DispatchQueue.main)            .sink { [weak self] loadedProfile in                if let loaded = loadedProfile {                    self?.profile = loaded                }                self?.loaded = true            }            .store(in: &cancellables)    }    func save() {        profile.age = age        service.updateUserProfile(profile)        originalProfile = profile    }        func discardChanges() {            if let original = originalProfile {                profile = original            }        }        func saveProfileImage(_ image: UIImage) -> String? {        let filename = "profile_\(UUID().uuidString.prefix(8)).jpg"        if ImageStorage.save(image: image, with: filename) {            return filename        }        return nil    }}