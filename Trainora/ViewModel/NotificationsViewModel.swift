import CoreData////  NotificationsViewModel.swift//  Trainora////  Created by user266021 on 5/7/25.//import SwiftUIimport UserNotificationsfinal class NotificationsViewModel: ObservableObject {    @Published private(set) var notifications: [NotificationModel] = []    private let context: NSManagedObjectContext    private let center = UNUserNotificationCenter.current()    init(context: NSManagedObjectContext) {        self.context = context        fetchNotifications()    }    func fetchNotifications() {        let request: NSFetchRequest<NotificationEntity> =            NotificationEntity.fetchRequest()        request.sortDescriptors = [            NSSortDescriptor(                keyPath: \NotificationEntity.date,                ascending: false            )        ]        do {            let entities = try context.fetch(request)            notifications = entities.compactMap { entity in                guard let id = entity.id,                    let date = entity.date,                    let typeRaw = entity.type,                    let type = AppNotificationType(rawValue: typeRaw)                else { return nil }                return NotificationModel(                    id: id,                    type: type,                    title: entity.title ?? "",                    body: entity.body ?? "",                    date: date,                    isSeen: entity.isSeen                )            }        } catch {            print("Failed to fetch notifications: \(error)")        }    }    func toggleSeen(_ notification: NotificationModel) {        let request: NSFetchRequest<NotificationEntity> =            NotificationEntity.fetchRequest()        request.predicate = NSPredicate(            format: "id == %@",            notification.id as CVarArg        )        do {            if let entity = try context.fetch(request).first {                entity.isSeen.toggle()                try context.save()                fetchNotifications()            }        } catch {            print("Error toggling seen: \(error)")        }    }    func clearAll() {        center.removeAllDeliveredNotifications()        center.removeAllPendingNotificationRequests()        let fetchRequest: NSFetchRequest<NotificationEntity> =            NotificationEntity.fetchRequest()        do {            let all = try context.fetch(fetchRequest)            all.forEach { context.delete($0) }            try context.save()            notifications.removeAll()        } catch {            print("Error clearing notifications: \(error)")        }    }}