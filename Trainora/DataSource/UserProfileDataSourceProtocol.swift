import Combineimport CoreData////  UserProfileDataSourceProtocol.swift//  Trainora////  Created by user266021 on 5/3/25.//import Foundationprotocol UserProfileDataSourceProtocol {    func getProfile(email: String, password: String) -> AnyPublisher<        UserProfile?, Never    >    func getProfilebyEmail(email: String) -> AnyPublisher<UserProfile?, Never>    func saveProfile(_ profile: UserProfile)}final class CoreDataUserProfileDataSource: UserProfileDataSourceProtocol {    private let context: NSManagedObjectContext    init(        context: NSManagedObjectContext = PersistenceController.shared.container            .viewContext    ) {        self.context = context    }    func getProfile(email: String, password: String) -> AnyPublisher<        UserProfile?, Never    > {        let request: NSFetchRequest<UserProfileEntity> =            UserProfileEntity.fetchRequest()        request.predicate = NSPredicate(            format: "email == %@ AND password == %@",            email,            password        )        return Future { promise in            let result = try? self.context.fetch(request).first?.toDomain()            promise(.success(result))        }        .eraseToAnyPublisher()    }    func getProfilebyEmail(email: String) -> AnyPublisher<UserProfile?, Never> {        let request: NSFetchRequest<UserProfileEntity> =            UserProfileEntity.fetchRequest()        request.predicate = NSPredicate(format: "email == %@", email)        return Future { promise in            let result = try? self.context.fetch(request).first?.toDomain()            promise(.success(result))        }        .eraseToAnyPublisher()    }    func saveProfile(_ profile: UserProfile) {        let request: NSFetchRequest<UserProfileEntity> =            UserProfileEntity.fetchRequest()        request.fetchLimit = 1        if let entity = try? context.fetch(request).first {            entity.update(from: profile)        } else {            let newEntity = UserProfileEntity(context: context)            newEntity.update(from: profile)        }        try? context.save()    }}