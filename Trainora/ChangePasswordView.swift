////  ChangePasswordView.swift//  Trainora////  Created by user266021 on 5/4/25.//import SwiftUIstruct ChangePasswordView: View {    @EnvironmentObject var colorSchemeManager: ColorSchemeManager    @EnvironmentObject var userSession: UserSession    @Environment(\.dismiss) private var dismiss    @State private var oldPassword = ""    @State private var newPassword = ""    @State private var confirmPassword = ""    @State private var passwordChanged = false    @State private var showErrorAlert = false    private let service = UserProfileService(        repository: UserProfileRepository(            dataSource: CoreDataUserProfileDataSource()        )    )    var body: some View {        ScrollView {            VStack(spacing: 20) {                Group {                    Text("Current Password")                        .font(.headline)                        .frame(maxWidth: .infinity, alignment: .leading)                    SecureField("Old Password", text: $oldPassword)                        .textFieldStyle(RoundedBorderTextFieldStyle())                    Text("New Password")                        .font(.headline)                        .frame(maxWidth: .infinity, alignment: .leading)                    SecureField("New Password", text: $newPassword)                        .textFieldStyle(RoundedBorderTextFieldStyle())                    SecureField("Confirm Password", text: $confirmPassword)                        .textFieldStyle(RoundedBorderTextFieldStyle())                }                Button(action: {                    guard !oldPassword.isEmpty,                        !newPassword.isEmpty,                        newPassword == confirmPassword                    else {                        return                    }                    if let email = userSession.currentUser?.email {                        service.updatePassword(                            for: email,                            oldPassword: oldPassword,                            newPassword: newPassword                        ) { success in                            DispatchQueue.main.async {                                if success {                                    passwordChanged = true                                } else {                                    showErrorAlert = true                                }                            }                        }                    }                }) {                    Text("Save Password")                        .fontWeight(.bold)                        .padding()                        .frame(maxWidth: .infinity)                        .background(Color.blue)                        .foregroundColor(.white)                        .cornerRadius(12)                }                .disabled(                    newPassword.isEmpty || confirmPassword.isEmpty                        || newPassword != confirmPassword                )                .opacity(                    newPassword.isEmpty || confirmPassword.isEmpty                        || newPassword != confirmPassword ? 0.6 : 1                )            }            .padding()        }        .navigationTitle("Change Password")        .alert("Password Updated", isPresented: $passwordChanged) {            Button("OK", role: .cancel) {                dismiss()            }        }        .alert("Incorrect Current Password", isPresented: $showErrorAlert) {            Button("OK", role: .cancel) {}        }    }}