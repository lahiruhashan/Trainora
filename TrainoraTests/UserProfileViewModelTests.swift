////  UserProfileViewModelTests.swift//  Trainora////  Created by user266021 on 5/7/25.//import XCTestimport Combine@testable import Trainorafinal class UserProfileViewModelTests: XCTestCase {    private class MockUserProfileService: UserProfileServiceProtocol {        var userProfileByEmailReturn: UserProfile?        private(set) var updatedProfile: UserProfile?        private(set) var updatedPasswordArgs:            (email: String, old: String, new: String)?        init(userProfileByEmailReturn: UserProfile?) {            self.userProfileByEmailReturn = userProfileByEmailReturn        }        func getUserProfile(email: String, password: String) -> AnyPublisher<            UserProfile?, Never        > {            Just(nil).eraseToAnyPublisher()        }        func getUserProfileByEmail(email: String) -> AnyPublisher<            UserProfile?, Never        > {            Just(userProfileByEmailReturn)                .eraseToAnyPublisher()        }        func updateUserProfile(_ profile: UserProfile) {            updatedProfile = profile        }        func updatePassword(            for email: String,            oldPassword: String,            newPassword: String,            completion: @escaping (Bool) -> Void        ) {            updatedPasswordArgs = (                email: email, old: oldPassword, new: newPassword            )            completion(true)        }    }    private var cancellables = Set<AnyCancellable>()    private func expectLoadedTrue(        of viewModel: UserProfileViewModel,        file: StaticString = #file,        line: UInt = #line,        _ assertion: @escaping () -> Void    ) {        let exp = expectation(description: "loaded == true")        viewModel.$loaded            .dropFirst()            .first()            .sink { loaded in                XCTAssertTrue(loaded, file: file, line: line)                assertion()                exp.fulfill()            }            .store(in: &cancellables)        wait(for: [exp], timeout: 0.5)    }    func test_loadProfile_success_updatesProfileAndLoaded() {        // Arrange a known user        let dob = Calendar.current.date(            byAdding: .year,            value: -25,            to: Date()        )!        let expected = UserProfile(            id: UUID(uuidString: "AAAAAAAA-BBBB-CCCC-DDDD-EEEEEEEEEEEE")!,            firstName: "Tines",            lastName: "kumar",            email: "tines@example.com",            mobileNumber: "1234567890",            password: "pass",            dateOfBirth: dob,            weight: 60,            height: 165,            profileImageName: "tines.jpg",            experience: .intermediate,            gender: .female,            age: 0        )        let service = MockUserProfileService(userProfileByEmailReturn: expected)        let vm = UserProfileViewModel(service: service, userProfile: expected)        // Act & Assert: loaded should become true and profile updated        expectLoadedTrue(of: vm) {            XCTAssertEqual(vm.profile.id, expected.id)            XCTAssertEqual(vm.profile.firstName, expected.firstName)            XCTAssertEqual(vm.profile.lastName, expected.lastName)            XCTAssertEqual(vm.profile.email, expected.email)            XCTAssertEqual(vm.profile.mobileNumber, expected.mobileNumber)            XCTAssertEqual(vm.profile.password, expected.password)            XCTAssertEqual(vm.profile.dateOfBirth, expected.dateOfBirth)            XCTAssertEqual(vm.profile.weight, expected.weight)            XCTAssertEqual(vm.profile.height, expected.height)            XCTAssertEqual(                vm.profile.profileImageName,                expected.profileImageName            )            XCTAssertEqual(vm.profile.experience, expected.experience)            XCTAssertEqual(vm.profile.gender, expected.gender)        }    }    func test_loadProfile_nil_keepsDefaultProfileAndLoaded() {        // Arrange        let service = MockUserProfileService(userProfileByEmailReturn: nil)        let vm = UserProfileViewModel(service: service, userProfile: .empty)        let initial = vm.profile        // Act & Assert        expectLoadedTrue(of: vm) {            // Profile should be exactly what it was before            XCTAssertEqual(vm.profile.id, initial.id)            XCTAssertEqual(vm.profile.firstName, initial.firstName)            XCTAssertEqual(vm.profile.lastName, initial.lastName)            XCTAssertEqual(vm.profile.email, initial.email)            XCTAssertEqual(vm.profile.mobileNumber, initial.mobileNumber)            XCTAssertEqual(vm.profile.password, initial.password)            XCTAssertEqual(vm.profile.dateOfBirth, initial.dateOfBirth)            XCTAssertEqual(vm.profile.weight, initial.weight)            XCTAssertEqual(vm.profile.height, initial.height)            XCTAssertEqual(                vm.profile.profileImageName,                initial.profileImageName            )            XCTAssertEqual(vm.profile.experience, initial.experience)            XCTAssertEqual(vm.profile.gender, initial.gender)            XCTAssertEqual(vm.profile.age, initial.age)        }    }    func test_save_updatesAgeAndCallsService() {        // Arrange loaded profile with known DOB 30 years ago        let dob = Calendar.current.date(            byAdding: .year,            value: -30,            to: Date()        )!        var user = UserProfile(            id: UUID(),            firstName: "Bob",            lastName: "Brown",            email: "bob@example.com",            mobileNumber: "0987654321",            password: "word",            dateOfBirth: dob,            weight: 70,            height: 180,            profileImageName: "bob.jpg",            experience: .advanced,            gender: .male,            age: 0        )        let service = MockUserProfileService(userProfileByEmailReturn: user)        let vm = UserProfileViewModel(service: service, userProfile: user)        expectLoadedTrue(of: vm) {}        // Act        vm.save()        // Assert service was called with updated age        guard let updated = service.updatedProfile else {            XCTFail("updateUserProfile not called")            return        }        // Age should be 30        XCTAssertEqual(updated.age, 30)        // Other fields unchanged        XCTAssertEqual(updated.firstName, user.firstName)        XCTAssertEqual(updated.gender, user.gender)    }    func test_discardChanges_revertsProfileToLastSaved() {        // Arrange load and save a user        let dob = Calendar.current.date(            byAdding: .year,            value: -40,            to: Date()        )!        let user = UserProfile(            id: UUID(),            firstName: "Carol",            lastName: "Clark",            email: "carol@example.com",            mobileNumber: "5555555555",            password: "pwd",            dateOfBirth: dob,            weight: 65,            height: 170,            profileImageName: "carol.jpg",            experience: .beginner,            gender: .female,            age: 0        )        let service = MockUserProfileService(userProfileByEmailReturn: user)        let vm = UserProfileViewModel(service: service, userProfile: user)        expectLoadedTrue(of: vm) {}        // Save to set originalProfile        vm.save()        // Mutate profile        var mutated = vm.profile        mutated.firstName = "Changed"        mutated.weight = 999        vm.profile = mutated        // Act        vm.discardChanges()        // Assert that profile matches the last saved one        XCTAssertEqual(vm.profile, service.updatedProfile)    }    func test_saveProfileImage_returnsFilenameWithCorrectPattern() {        // Arrange        let service = MockUserProfileService(userProfileByEmailReturn: nil)        let vm = UserProfileViewModel(service: service, userProfile: .empty)        // Create a small red UIImage        UIGraphicsBeginImageContext(CGSize(width: 1, height: 1))        UIColor.red.setFill()        UIRectFill(CGRect(x: 0, y: 0, width: 1, height: 1))        let image = UIGraphicsGetImageFromCurrentImageContext()!        UIGraphicsEndImageContext()        // Act        let filename = vm.saveProfileImage(image)        // Assert        XCTAssertNotNil(filename)        if let name = filename {            XCTAssertTrue(name.hasPrefix("profile_"))            XCTAssertTrue(name.hasSuffix(".jpg"))            XCTAssertGreaterThan(name.count, "profile_.jpg".count)        }    }}