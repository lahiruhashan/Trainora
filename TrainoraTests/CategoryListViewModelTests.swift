////  CategoryListViewModelTests.swift//  Trainora////  Created by user266021 on 5/7/25.//import XCTestimport Combine@testable import Trainorafinal class CategoryListViewModelTests: XCTestCase {    private class MockService: ExerciseLibraryServiceProtocol {        var currentLevel: ExperienceLevel        private(set) var toggleCategoryCalledWith: UUID?        private(set) var toggleExerciseCalledWith: UUID?        var categoriesToReturn: [ExerciseCategory]        init(initialLevel: ExperienceLevel, categories: [ExerciseCategory]) {            self.currentLevel = initialLevel            self.categoriesToReturn = categories        }        func fetchCategoryDTOs() -> AnyPublisher<[ExerciseCategory], Never> {            Just(categoriesToReturn)                .eraseToAnyPublisher()        }        func fetchExerciseDTOs(for categoryId: UUID) -> AnyPublisher<            [Exercise], Never        > {            Just([]).eraseToAnyPublisher()        }        func toggleFavoriteCategory(id: UUID) {            toggleCategoryCalledWith = id            if let idx = categoriesToReturn.firstIndex(where: { $0.id == id }) {                categoriesToReturn[idx].isFavorite.toggle()            }        }        func toggleFavoriteExercise(id: UUID) {            toggleExerciseCalledWith = id        }    }    private var cancellables = Set<AnyCancellable>()    private func expectCategories(        of viewModel: CategoryListViewModel,        file: StaticString = #file,        line: UInt = #line,        _ assertion: @escaping ([ExerciseCategory]) -> Void    ) {        let exp = expectation(description: "categories updated")        viewModel.$categories            .dropFirst()            .first()            .sink { cats in                assertion(cats)                exp.fulfill()            }            .store(in: &cancellables)        wait(for: [exp], timeout: 0.5, enforceOrder: true)    }    func test_initialState_and_loadCategories_sortsCorrectly() {        let a = ExerciseCategory(            id: UUID(),            title: "Archery",            imageName: "archery",            level: .beginner,            totalExercises: 5,            totalCalories: 100,            totalDuration: 30,            isFavorite: false        )        let b = ExerciseCategory(            id: UUID(),            title: "Ballet",            imageName: "ballet",            level: .beginner,            totalExercises: 3,            totalCalories: 80,            totalDuration: 20,            isFavorite: true        )        let c = ExerciseCategory(            id: UUID(),            title: "Cycling",            imageName: "cycling",            level: .beginner,            totalExercises: 10,            totalCalories: 300,            totalDuration: 60,            isFavorite: false        )        let mock = MockService(initialLevel: .beginner, categories: [a, b, c])        let vm = CategoryListViewModel(service: mock)        XCTAssertEqual(vm.selectedLevel, .beginner)        expectCategories(of: vm) { cats in            // favorite (b) first, then a < c            XCTAssertEqual(cats.map(\.id), [b.id, a.id, c.id])        }    }    func test_selectLevel_changesLevel_and_triggersReload() {        let cat1 = ExerciseCategory(            id: UUID(),            title: "Yoga",            imageName: "yoga",            level: .beginner,            totalExercises: 5,            totalCalories: 50,            totalDuration: 15,            isFavorite: false        )        let mock = MockService(initialLevel: .beginner, categories: [cat1])        let vm = CategoryListViewModel(service: mock)        // drain the initial load        expectCategories(of: vm) { _ in }        let cat2 = ExerciseCategory(            id: UUID(),            title: "Zumba",            imageName: "zumba",            level: .intermediate,            totalExercises: 8,            totalCalories: 200,            totalDuration: 25,            isFavorite: false        )        mock.categoriesToReturn = [cat2]        vm.selectLevel(.intermediate)        XCTAssertEqual(vm.selectedLevel, .intermediate)        XCTAssertEqual(mock.currentLevel, .intermediate)        expectCategories(of: vm) { cats in            XCTAssertEqual(cats, [cat2])        }    }    func test_toggleFavoriteCategory_updatesService_and_reload() {        let id = UUID()        let original = ExerciseCategory(            id: id,            title: "Pilates",            imageName: "pilates",            level: .advanced,            totalExercises: 12,            totalCalories: 150,            totalDuration: 40,            isFavorite: false        )        let mock = MockService(initialLevel: .advanced, categories: [original])        let vm = CategoryListViewModel(service: mock)        // drain initial load        expectCategories(of: vm) { _ in }        vm.toggleFavoriteCategory(id: id)        XCTAssertEqual(mock.toggleCategoryCalledWith, id)        expectCategories(of: vm) { cats in            XCTAssertEqual(cats.count, 1)            XCTAssertTrue(cats[0].isFavorite)        }    }}