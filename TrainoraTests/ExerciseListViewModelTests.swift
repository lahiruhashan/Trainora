////  ExerciseListViewModelTests.swift//  Trainora////  Created by user266021 on 5/7/25.//import XCTestimport Combine@testable import Trainorafinal class ExerciseListViewModelTests: XCTestCase {    private class MockService: ExerciseLibraryServiceProtocol {        var currentLevel: ExperienceLevel = .beginner        var exercisesToReturn: [Exercise]        private(set) var toggleExerciseCalledWith: UUID?        private(set) var toggleCategoryCalledWith: UUID?        init(exercises: [Exercise]) {            self.exercisesToReturn = exercises        }        func fetchCategoryDTOs() -> AnyPublisher<[ExerciseCategory], Never> {            Just([]).eraseToAnyPublisher()        }        func fetchExerciseDTOs(for categoryId: UUID) -> AnyPublisher<            [Exercise], Never        > {            Just(exercisesToReturn).eraseToAnyPublisher()        }        func toggleFavoriteCategory(id: UUID) {            toggleCategoryCalledWith = id        }        func toggleFavoriteExercise(id: UUID) {            toggleExerciseCalledWith = id            if let idx = exercisesToReturn.firstIndex(where: { $0.id == id }) {                exercisesToReturn[idx].isFavorite.toggle()            }        }    }    private var cancellables = Set<AnyCancellable>()    private func expectExercises(        of viewModel: ExerciseListViewModel,        _ assertion: @escaping ([Exercise]) -> Void    ) {        let exp = expectation(description: "exercises updated")        viewModel.$exercises            .dropFirst()  // skip the initial empty array            .first()  // take the next update, then cancel            .sink { exercises in                assertion(exercises)                exp.fulfill()            }            .store(in: &cancellables)        wait(for: [exp], timeout: 0.5)    }    func test_initialLoad_sortsByFavoriteThenTitle() {        // Arrange        let catId = UUID()        let e1 = Exercise(            id: UUID(),            title: "Athletics",            description: "",            duration: 10,            calories: 50,            reps: 5,            videoURL: nil,            imageName: "athletics",            isFavorite: false,            categoryId: catId        )        let e2 = Exercise(            id: UUID(),            title: "Boxing",            description: "",            duration: 15,            calories: 100,            reps: 3,            videoURL: nil,            imageName: "boxing",            isFavorite: true,            categoryId: catId        )        let e3 = Exercise(            id: UUID(),            title: "Cycling",            description: "",            duration: 20,            calories: 200,            reps: 0,            videoURL: nil,            imageName: "cycling",            isFavorite: false,            categoryId: catId        )        let mock = MockService(exercises: [e1, e2, e3])        // Act        let vm = ExerciseListViewModel(service: mock, categoryId: catId)        // Assert        expectExercises(of: vm) { exercises in            let ids = exercises.map(\.id)            // favorite (e2) first, then alphabetical by title            XCTAssertEqual(ids, [e2.id, e1.id, e3.id])        }    }    func test_toggleFavoriteExercise_callsService_andReloads() {        // Arrange        let catId = UUID()        let id = UUID()        let original = Exercise(            id: id,            title: "Dancing",            description: "",            duration: 12,            calories: 80,            reps: 4,            videoURL: nil,            imageName: "dancing",            isFavorite: false,            categoryId: catId        )        let mock = MockService(exercises: [original])        let vm = ExerciseListViewModel(service: mock, categoryId: catId)        // Drain initial load        expectExercises(of: vm) { _ in }        // Act        vm.toggleFavoriteExercise(id: id)        // Assert service interaction        XCTAssertEqual(mock.toggleExerciseCalledWith, id)        // Assert reload reflects toggled favorite        expectExercises(of: vm) { exercises in            XCTAssertEqual(exercises.count, 1)            XCTAssertTrue(exercises[0].isFavorite)        }    }    func test_loadExercises_canBeInvokedManually() {        // Arrange        let catId = UUID()        let mock = MockService(exercises: [])        let vm = ExerciseListViewModel(service: mock, categoryId: catId)        // Drain initial empty load        expectExercises(of: vm) { exercises in            XCTAssertTrue(exercises.isEmpty)        }        // Prepare new data        let ex = Exercise(            id: UUID(),            title: "Elliptical",            description: "",            duration: 8,            calories: 60,            reps: 0,            videoURL: nil,            imageName: "elliptical",            isFavorite: false,            categoryId: catId        )        mock.exercisesToReturn = [ex]        // Act        vm.loadExercises()        // Assert new data arrives        expectExercises(of: vm) { exercises in            XCTAssertEqual(exercises, [ex])        }    }}